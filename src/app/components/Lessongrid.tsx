"use client";
import React from 'react';
import '../css/lessons.css';

interface LessonData {
    id: number;
    isCompleted: boolean;
    isActive: boolean;
    isLocked: boolean;
}

interface ChapterInfo {
    title: string;
    description: string;
    totalStages: number;
    currentStage: number;
}

interface LessonGridProps {
    chapterNumber: number;
    onStageClick?: (stageId: number) => void;
}

const LessonGrid = ({ 
    chapterNumber = 1,
    onStageClick 
}: LessonGridProps) => {

    //  Mock ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend - ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ User ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const userProgress = {
        // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞ ‡∏î‡πà‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ö‡∏ó‡∏ô‡∏±‡πâ‡∏ô
        lastCompletedChapter: 3,    // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡πâ‡∏ß
        lastCompletedStage: 5,      // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 5 ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1
        currentChapter: 4,          // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2
        currentStage: 1             // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3 ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2
    };

    //  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
    const chaptersStructure: Record<number, Omit<ChapterInfo, 'currentStage'>> = {
        1: {
            title: "‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
            description: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£",
            totalStages: 5
        },
        2: {
            title: "‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", 
            description: "‡∏ù‡∏∂‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß",
            totalStages: 5
        },
        3: {
            title: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö",
            description: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠",
            totalStages: 5
        },
        4: {
            title: "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
            description: "‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
            totalStages: 5
        },
        5: {
            title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
            description: "‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô",
            totalStages: 5
        }
    };

   
    const calculateCurrentStage = (chapterNum: number): number => {
        if (chapterNum < userProgress.lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß -> ‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            return chaptersStructure[chapterNum]?.totalStages + 1 || 6;
        } 
        else if (chapterNum === userProgress.lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô
            return chaptersStructure[chapterNum]?.totalStages + 1 || 6;
        }
        else if (chapterNum === userProgress.currentChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô -> ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            return userProgress.currentStage;
        }
        else {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î -> ‡∏•‡πá‡∏≠‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô
            return 0;  // ‚Üê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 1 ‡πÄ‡∏õ‡πá‡∏ô 0
        }
    };

    const currentChapter: ChapterInfo = chaptersStructure[chapterNumber] 
        ? {
            ...chaptersStructure[chapterNumber],
            currentStage: calculateCurrentStage(chapterNumber)
          }
        : {
            title: "‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà",
            description: "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
            totalStages: 5,
            currentStage: 1
          };


    const generateLessons = (): LessonData[] => {
        const lessons: LessonData[] = [];
        
        for (let i = 1; i <= currentChapter.totalStages; i++) {
            lessons.push({
                id: i,
                isCompleted: i < currentChapter.currentStage,  // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                isActive: i === currentChapter.currentStage,   // ‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                isLocked: i > currentChapter.currentStage      // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Ñ
            });
        }
        
        return lessons;
    };

    const lessons = generateLessons();

    const handleLessonClick = (lessonId: number) => {
        const lesson = lessons.find(l => l.id === lessonId);
        
        if (lesson?.isLocked) {
            alert(`‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ! ‡∏ó‡∏≥‡∏î‡πà‡∏≤‡∏ô ${currentChapter.currentStage} ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô`);
            return;
        }

        console.log(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${chapterNumber}: ${currentChapter.title} - ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${lessonId}`);
        
        if (onStageClick) {
            onStageClick(lessonId);
        }
    };

    return (
        <div className="lesson-grid-container">
            {/*  Grid ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πà‡∏≤‡∏ô */}
            <div className="lesson-grid-wrapper">
                <div className="lesson-grid">
                    {lessons.map((lesson) => (
                        <button
                            key={lesson.id}
                            className={`lesson-circle 
                                ${lesson.isActive ? 'active' : ''} 
                                ${lesson.isCompleted ? 'completed' : ''} 
                                ${lesson.isLocked ? 'locked' : ''}`}
                            onClick={() => handleLessonClick(lesson.id)}
                            disabled={lesson.isLocked}
                        >
                            {lesson.isLocked ? 'üîí' : lesson.id}
                        </button>
                    ))}
                </div>
            </div>

            {/*  Info Card ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó */}
            <div className="lesson-info-cards">
                <div className="info-card unit-card">
                    <h3 className="card-title">{currentChapter.title}</h3>
                    <p className="card-subtitle">{currentChapter.description}</p>
                    <div className="progress-info">
                        <span className="progress-text">
                            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {Math.max(0, currentChapter.currentStage - 1)}/{currentChapter.totalStages} ‡∏î‡πà‡∏≤‡∏ô
                        </span>
                        <div className="progress-bar">
                            <div 
                                className="progress-fill" 
                                style={{width: `${(Math.max(0, currentChapter.currentStage - 1) / currentChapter.totalStages) * 100}%`}}
                            ></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default LessonGrid;