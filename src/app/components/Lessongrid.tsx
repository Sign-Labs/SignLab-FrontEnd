"use client";
import React, { useState, useEffect } from 'react';
import '../css/lessons.css';

interface LessonData {
    id: number;
    isCompleted: boolean;
    isActive: boolean;
    isLocked: boolean;
}

interface UserProgress {
    lastCompletedChapter: number;
    lastCompletedStage: number;
}

interface LessonGridProps {
    chapterNumber: number;
    onStageClick?: (stageId: number) => void;
    userProgress?: UserProgress; // ‚Üê ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å props (‡∏à‡∏≤‡∏Å API)
}

const LessonGrid = ({ 
    chapterNumber = 1,
    onStageClick,
    userProgress = { lastCompletedChapter: 4, lastCompletedStage: 6 } // ‚Üê ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
}: LessonGridProps) => {

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    const chaptersData = {
        1: { title: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", totalStages: 5 },
        2: { title: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", description: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", totalStages: 5 },
        3: { title: "‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞", description: "‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", totalStages: 5 },
        4: { title: "‡∏™‡∏£‡∏∞ ‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå", description: "‡∏™‡∏£‡∏∞ ‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", totalStages: 5 },
        5: { title: "‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", description: "‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", totalStages: 5 }
    };

    // ‚Üê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ô‡∏µ‡πâ
    const getCurrentStageForChapter = (chapterNum: number): number => {
        const { lastCompletedChapter, lastCompletedStage } = userProgress;
        
        if (chapterNum < lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß -> ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö (6)
            return 6;
        } 
        else if (chapterNum === lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const totalStages = chaptersData[chapterNum as keyof typeof chaptersData]?.totalStages || 5;
            if (lastCompletedStage >= totalStages) {
                return 6; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            } else {
                return lastCompletedStage + 1; // ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            }
        }
        else if (chapterNum === lastCompletedChapter + 1) {
            // ‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô -> ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const previousChapterTotalStages = chaptersData[lastCompletedChapter as keyof typeof chaptersData]?.totalStages || 5;
            
            if (lastCompletedStage >= previousChapterTotalStages) {
                return 1; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πà‡∏≤‡∏ô 1 ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà
            } else {
                return 0; // ‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏à‡∏∂‡∏á‡∏¢‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Ñ
            }
        }
        else {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î -> ‡∏•‡πá‡∏≠‡∏Ñ
            return 0;
        }
    };

    // ‚Üê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏ó‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isChapterUnlocked = (chapterNum: number): boolean => {
        return chapterNum <= userProgress.lastCompletedChapter + 1;
    };

    // ‚Üê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    const getCompletedStagesCount = (chapterNum: number): number => {
        const { lastCompletedChapter, lastCompletedStage } = userProgress;
        const totalStages = chaptersData[chapterNum as keyof typeof chaptersData]?.totalStages || 5;
        
        if (chapterNum < lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß -> ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö
            return totalStages;
        } 
        else if (chapterNum === lastCompletedChapter) {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÉ‡∏ä‡πâ lastCompletedStage
            return Math.min(lastCompletedStage, totalStages);
        }
        else if (chapterNum === lastCompletedChapter + 1) {
            // ‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            const previousChapterTotalStages = chaptersData[lastCompletedChapter as keyof typeof chaptersData]?.totalStages || 5;
            
            if (lastCompletedStage >= previousChapterTotalStages) {
                return 0; // ‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ó‡πÉ‡∏´‡∏°‡πà ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏î‡πà‡∏≤‡∏ô‡πÑ‡∏´‡∏ô
            } else {
                return 0; // ‡∏ö‡∏ó‡∏¢‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Ñ
            }
        }
        else {
            // ‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î
            return 0;
        }
    };

    // ‚Üê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const getCurrentChapterInfo = () => {
        const chapterData = chaptersData[chapterNumber as keyof typeof chaptersData];
        return {
            title: chapterData?.title || "‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà",
            description: chapterData?.description || "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
            totalStages: chapterData?.totalStages || 5,
            currentStage: getCurrentStageForChapter(chapterNumber)
        };
    };

    const currentChapter = getCurrentChapterInfo();

    // ‚Üê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡πà‡∏≤‡∏ô
    const generateLessons = (): LessonData[] => {
        const lessons: LessonData[] = [];
        const currentStageForThisChapter = getCurrentStageForChapter(chapterNumber);
        const isUnlocked = isChapterUnlocked(chapterNumber);
        
        for (let i = 1; i <= currentChapter.totalStages; i++) {
            if (!isUnlocked || currentStageForThisChapter === 0) {
                // ‡∏ö‡∏ó‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πá‡∏≠‡∏Ñ -> ‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏•‡πá‡∏≠‡∏Ñ
                lessons.push({
                    id: i,
                    isCompleted: false,
                    isActive: false,
                    isLocked: true
                });
            } else {
                // ‡∏ö‡∏ó‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
                lessons.push({
                    id: i,
                    isCompleted: i < currentStageForThisChapter,  // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                    isActive: i === currentStageForThisChapter,   // ‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    isLocked: i > currentStageForThisChapter      // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Ñ
                });
            }
        }
        
        return lessons;
    };

    const lessons = generateLessons();

    // ‚Üê ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isChapterFullyCompleted = (): boolean => {
        return getCurrentStageForChapter(chapterNumber) > currentChapter.totalStages;
    };

    const handleLessonClick = (lessonId: number) => {
        const lesson = lessons.find(l => l.id === lessonId);
        
        if (!isChapterUnlocked(chapterNumber)) {
            alert(`‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ! ‡∏ó‡∏≥‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô`);
            return;
        }
        
        if (lesson?.isLocked) {
            if (isChapterFullyCompleted()) {
                console.log(`‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${chapterNumber} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
                return;
            }
            
            alert(`‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ! ‡∏ó‡∏≥‡∏î‡πà‡∏≤‡∏ô ${getCurrentStageForChapter(chapterNumber)} ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô`);
            return;
        }

        console.log(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${chapterNumber}: ${currentChapter.title} - ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${lessonId}`);
        
        if (onStageClick) {
            onStageClick(lessonId);
        }
    };

    return (
        <div className="lesson-grid-container">
            {/* Grid ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πà‡∏≤‡∏ô */}
            <div className="lesson-grid-wrapper">
                <div className="lesson-grid">
                    {lessons.map((lesson) => (
                        <button
                            key={lesson.id}
                            className={`lesson-circle 
                                ${lesson.isActive ? 'active' : ''} 
                                ${lesson.isCompleted ? 'completed' : ''} 
                                ${lesson.isLocked ? 'locked' : ''}`}
                            onClick={() => handleLessonClick(lesson.id)}
                            disabled={lesson.isLocked}
                        >
                            {lesson.isLocked ? 'üîí' : lesson.id}
                        </button>
                    ))}
                </div>
            </div>

            {/* Info Card */}
           <div className="lesson-info-cards">
    <div className="info-card ranking-card">
        <h3 className="card-title">{currentChapter.title}</h3>
        <p className="card-subtitle">{currentChapter.description}</p>
        <div className="progress-info">
            <div className="progress-bar">
                <div 
                    className="progress-fill" 
                    style={{
                        width: `${(getCompletedStagesCount(chapterNumber) / currentChapter.totalStages) * 100}%`,
                        backgroundColor: "#FF9500" // ‚Üê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏™‡πâ‡∏°
                    }}
                ></div>
            </div>
        </div>
    </div>
</div>

        </div>
    );
};

export default LessonGrid;